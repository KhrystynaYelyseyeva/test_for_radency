{"version":3,"sources":["propTypes.js","DataTable.js","regex.js","utils.js","validation-functions.js","App.js","index.js"],"names":["PropTypes","array","shortid","require","Table","styled","table","TableCell","td","TableCellWithError","TableHeader","th","DataTable","memo","data","headers","map","head","generate","dataRow","Object","entries","dataKey","value","Fragment","test","ID","defaultProps","patternFileExtension","patternLinesSeparator","patternRowSeparator","patternFullName","patternPhone","patternEmail","patternLicense","patternLicenseStates","patternFirstDateType","patternSecondDateType","HEADERS","USA_STATES","name","abbreviation","experienceValidation","experience","age","length","Number","hasChildrenValidation","hasChildren","some","licenseStatesValidation","states","errorState","preparedStates","split","state","isValidState","existingState","toUpperCase","validStateObj","find","Boolean","join","expirationDateValidation","date","parts","day","month","year","now","Date","nowDay","getDate","nowMonth","getMonth","nowYear","getFullYear","parseInt","monthLength","findDuplicate","row","key","obj","preparedRows","index","message","hasOwnProperty","includes","Error","div","Input","input","Label","label","App","useState","setHeaders","setData","fileError","setFileError","processData","lines","every","header","preparedHeader","trim","RegExp","headersValidation","license","income","email","phone","fullName","rows","i","String","item","rowsData","j","cellValue","substring","cellError","slice","toLowerCase","toFixed","values","filter","x","push","names","phones","emails","forEach","duplicateValidation","href","target","rel","htmlFor","id","type","accept","onChange","e","files","file","reader","FileReader","onload","evt","result","readAsBinaryString","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kPAGaA,IAAUC,MACbD,IAAUC,M,wkBCDpB,IAAMC,EAAUC,EAAQ,IAElBC,EAAQC,IAAOC,MAAV,KAMLC,EAAYF,IAAOG,GAAV,KAMTC,EAAqBJ,IAAOG,GAAV,KAIlBE,EAAcL,IAAOM,GAAV,KAQXC,EAAYC,gBAAK,YAAwB,IAArBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,QAC5B,OACI,eAACX,EAAD,WACI,gCACI,6BACKW,EAAQC,KAAI,SAAAC,GAAI,OACb,cAACP,EAAD,UACKO,GADaf,EAAQgB,mBAMtC,gCACKJ,EAAKE,KAAK,SAAAG,GAAO,OACd,6BACKC,OAAOC,QAAQF,GAASH,KAAI,mCAAEM,EAAF,KAAUC,EAAV,YACzB,cAAC,IAAMC,SAAP,UACK,SAASC,KAAKH,GAEP,cAACb,EAAD,UACKc,IAGL,cAAChB,EAAD,UACKgB,KARIrB,EAAQgB,gBAF5BC,EAAQO,eAwBrCd,EAAUe,aD5DkB,CACxBZ,QAAS,GACTD,KAAM,IC4DKF,QCrEFgB,EAAuB,WAAYC,EAAwB,UACpEC,EAAsB,sCAAuCC,EAAkB,+BAC/EC,EAAe,wBACfC,EAAe,6GACfC,EAAiB,iBAAkBC,EAAuB,mBAC1DC,EAAuB,4BAA6BC,EAAwB,0BCLnEC,EAAU,CACnB,YACA,QACA,QACA,MACA,aACA,gBACA,eACA,iBACA,kBACA,kBAGSC,EAAa,CACtB,CACIC,KAAM,UACNC,aAAc,MAElB,CACID,KAAM,SACNC,aAAc,MAElB,CACID,KAAM,iBACNC,aAAc,MAElB,CACID,KAAM,UACNC,aAAc,MAElB,CACID,KAAM,WACNC,aAAc,MAElB,CACID,KAAM,aACNC,aAAc,MAElB,CACID,KAAM,WACNC,aAAc,MAElB,CACID,KAAM,cACNC,aAAc,MAElB,CACID,KAAM,WACNC,aAAc,MAElB,CACID,KAAM,uBACNC,aAAc,MAElB,CACID,KAAM,iCACNC,aAAc,MAElB,CACID,KAAM,UACNC,aAAc,MAElB,CACID,KAAM,UACNC,aAAc,MAElB,CACID,KAAM,OACNC,aAAc,MAElB,CACID,KAAM,SACNC,aAAc,MAElB,CACID,KAAM,QACNC,aAAc,MAElB,CACID,KAAM,WACNC,aAAc,MAElB,CACID,KAAM,UACNC,aAAc,MAElB,CACID,KAAM,OACNC,aAAc,MAElB,CACID,KAAM,SACNC,aAAc,MAElB,CACID,KAAM,WACNC,aAAc,MAElB,CACID,KAAM,YACNC,aAAc,MAElB,CACID,KAAM,QACNC,aAAc,MAElB,CACID,KAAM,mBACNC,aAAc,MAElB,CACID,KAAM,WACNC,aAAc,MAElB,CACID,KAAM,gBACNC,aAAc,MAElB,CACID,KAAM,WACNC,aAAc,MAElB,CACID,KAAM,YACNC,aAAc,MAElB,CACID,KAAM,cACNC,aAAc,MAElB,CACID,KAAM,WACNC,aAAc,MAElB,CACID,KAAM,UACNC,aAAc,MAElB,CACID,KAAM,WACNC,aAAc,MAElB,CACID,KAAM,SACNC,aAAc,MAElB,CACID,KAAM,gBACNC,aAAc,MAElB,CACID,KAAM,aACNC,aAAc,MAElB,CACID,KAAM,aACNC,aAAc,MAElB,CACID,KAAM,WACNC,aAAc,MAElB,CACID,KAAM,iBACNC,aAAc,MAElB,CACID,KAAM,eACNC,aAAc,MAElB,CACID,KAAM,2BACNC,aAAc,MAElB,CACID,KAAM,OACNC,aAAc,MAElB,CACID,KAAM,WACNC,aAAc,MAElB,CACID,KAAM,SACNC,aAAc,MAElB,CACID,KAAM,QACNC,aAAc,MAElB,CACID,KAAM,eACNC,aAAc,MAElB,CACID,KAAM,cACNC,aAAc,MAElB,CACID,KAAM,eACNC,aAAc,MAElB,CACID,KAAM,iBACNC,aAAc,MAElB,CACID,KAAM,eACNC,aAAc,MAElB,CACID,KAAM,YACNC,aAAc,MAElB,CACID,KAAM,QACNC,aAAc,MAElB,CACID,KAAM,OACNC,aAAc,MAElB,CACID,KAAM,UACNC,aAAc,MAElB,CACID,KAAM,iBACNC,aAAc,MAElB,CACID,KAAM,WACNC,aAAc,MAElB,CACID,KAAM,aACNC,aAAc,MAElB,CACID,KAAM,gBACNC,aAAc,MAElB,CACID,KAAM,YACNC,aAAc,MAElB,CACID,KAAM,UACNC,aAAc,OCrNTC,EAAuB,SAACC,GAAD,IAAaC,EAAb,uDAAmB,GAAnB,MAAyC,KAAfD,GACpC,IAAtBA,EAAWE,QACRC,OAAOH,IACPG,OAAOH,IAAe,GACtBG,OAAOF,GAAY,IAAME,OAAOH,IAAe,IAQzCI,EAAwB,SAAAC,GAAW,MAC5C,CAAC,OAAQ,SAASC,MAAM,SAAA1B,GAAK,OAAIA,IAAUyB,MAElCE,EAA0B,SAAAC,GACnC,IAAKhB,EAAqBV,KAAK0B,GAC3B,MAAO,CACHC,aAAyB,KAAXD,GACdE,eAAgBF,GAIxB,IAAIC,GAAa,EACXC,EAAiBF,EAClBG,MAAM,MACNtC,KAAK,SAAAuC,GACF,GAAqB,IAAjBA,EAAMV,OAAc,CACpB,IAAMW,EAAejB,EAChBU,MAAM,SAAAQ,GAAa,OAChBF,EAAMG,gBAAkBD,EAAchB,gBAG9C,OADAW,GAAcI,EACPA,EAAeD,EAAMG,cAAgBH,EACzC,GAAIA,EAAMV,OAAS,EAAG,CACzB,IAAMc,EAAgBpB,EACjBqB,MAAM,SAAAH,GACH,OAAOF,IAAUE,EAAcjB,QAIvC,OADAY,GAAcS,QAAQF,IACFJ,EAAQI,EAAclB,aAG1C,OADAW,EAAaG,EACNA,KAGdO,KAAK,MAEV,MAAO,CACHV,aACAC,mBAIKU,EAA2B,SAAAC,GACpC,GAAa,KAATA,EAAa,OAAO,EAExB,IAAK5B,EAAqBX,KAAKuC,KAAU3B,EAAsBZ,KAAKuC,GAChE,OAAO,EAEX,IAKIC,EAAOC,EAAKC,EAAOC,EALjBC,EAAM,IAAIC,KACVC,EAASF,EAAIG,UACbC,EAAWJ,EAAIK,WACfC,EAAUN,EAAIO,cAGjBxC,EAAqBX,KAAKuC,KACzBC,EAAQD,EAAKV,MAAM,KACnBY,EAAMW,SAASZ,EAAM,GAAI,IACzBE,EAAQU,SAASZ,EAAM,GAAI,IAC3BG,EAAOS,SAASZ,EAAM,GAAI,KAG3B5B,EAAsBZ,KAAKuC,KAC1BC,EAAQD,EAAKV,MAAM,KACnBY,EAAMW,SAASZ,EAAM,GAAI,IACzBE,EAAQU,SAASZ,EAAM,GAAI,IAC3BG,EAAOS,SAASZ,EAAM,GAAI,KAG9B,IAAMa,EAAc,CAAE,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAKlE,OAHGV,EAAO,MAAQ,GAAMA,EAAO,MAAQ,GAAKA,EAAO,IAAM,KACrDU,EAAY,GAAK,IAEdV,GAAQO,GACRP,EAAO,KACPD,GAAS,GACTA,EAAQ,IACRD,EAAM,GACNA,GAAOY,EAAYX,EAAQ,KAC1BC,IAASO,GAAUR,GAASM,KAC5BL,IAASO,GAAWR,IAAUM,GAAWT,GAAQO,IAOvDQ,EAAgB,SAAEC,EAAKC,EAAKC,EAAKC,EAAcC,EAAOC,GACrDL,EAAIC,KACCC,EAAII,eAAeN,EAAIC,IAClBE,EAAaD,EAAIF,EAAIC,KAAO,kBAAkBM,SAASF,KACxDF,EAAaD,EAAIF,EAAIC,KAAO,mBAA5B,YAAsDD,EAAG,GAAzD,cAAqEK,EAArE,OAEAL,EAAIC,KACJC,EAAIF,EAAIC,IAAQG,K,yxBClHhC,IAAMI,EAAQnF,IAAOoF,IAAV,KAULC,EAAQrF,IAAOsF,MAAV,KASLC,EAAQvF,IAAOwF,MAAV,KA0MIC,MAtLf,WAAgB,IAAD,EACiBC,mBAAS,IAD1B,mBACNhF,EADM,KACGiF,EADH,OAEWD,mBAAS,IAFpB,mBAENjF,EAFM,KAEAmF,EAFA,OAGqBF,oBAAS,GAH9B,mBAGNG,EAHM,KAGKC,EAHL,KAMPC,EAAc,SAAAtF,GAClBqF,GAAa,GAEb,IAAME,EAAQvF,EAAKwC,MAAMzB,GACrBd,EAAUsF,EAAM,GAAG/C,MAAMxB,GAE7B,GDrE6B,SAAAf,GAC7B,OAAIA,EAAQ8B,SAAWP,EAAQO,QAIxB9B,EACFuF,OAAM,SAACC,EAAQnB,GACZ,IAAMoB,EAAiBD,EAAOE,OAG9B,OAFsB,IAAIC,OAAOF,EAAgB,KAE5B/E,KAAKa,EAAQ8C,OC2DrCuB,CAAkB5F,GAAvB,CAKAA,EAAO,CACL,MADK,mBAEFuB,GAFE,CAGL,mBAIF,IADA,IDyCmCsE,EA1FPC,EAXHjE,EAFEkE,EAFAC,EAFGC,ECkExBC,EAAO,GACJC,EAAI,EAAGA,EAAIb,EAAMxD,OAAQqE,IAAK,CACrC,IAAMlC,EAAG,CACPmC,OAAOD,IADA,mBAEJb,EAAMa,GACJ5D,MAAMxB,GACNd,KAAI,SAAAoG,GAAI,OAAIA,EAAKX,WAJf,CAKP,KAIF,KADgCzB,EAAI,IAAMA,EAAI,IAAMA,EAAI,IAGtD,YADAmB,GAAa,GAKf,IADA,IAAMkB,EAAW,GACRC,EAAI,EAAGA,EAAIvG,EAAQ8B,OAAQyE,IAAK,CACvC,IAAIC,EAAYvC,EAAIsC,GAEhBC,EAAU1E,OAAS,IACA,MAAjB0E,EAAU,KAAYA,EAAYA,EAAUC,UAAU,EAAGD,EAAU1E,OAAS,IACxC,MAApC0E,EAAUA,EAAU1E,OAAS,KAAY0E,EAAYA,EAAUC,UAAUD,EAAU1E,OAAS,EAAG,KAGrG,IAAI4E,GAAY,EAEhB,OAAQ1G,EAAQuG,IACd,IAAK,YD9FmBN,EC+FUO,EAAhCE,GD/FkC1F,EAAgBN,KAAKuF,GCgGvD,MACF,IAAK,QD/FgBD,ECgGUQ,EAC7BA,GADAE,GDhG4BzF,EAAaP,KAAKsF,ICkG1CQ,EADiB,YACAA,EAAUG,OAAO,KACtC,MACF,IAAK,QDlGgBZ,ECmGUS,EAC7BA,GADAE,GDnG4BxF,EAAaR,KAAKqF,ICqG1CS,EAAYA,EAAUI,cAC1B,MACF,IAAK,MAEHJ,GADAE,IDtGgC,MAAf7E,ECsGU2E,IDrGpB,IAAf3E,EAAIC,QACDC,OAAOF,IACPE,OAAOF,IAAQ,MCoG6B,KAAd2E,EACrBA,EAAYzE,OAAOyE,GACvB,MACF,IAAK,aAEHA,GADAE,GAAa/E,EAAqB6E,EAAWzE,OAAOkC,EAAIsC,EAAE,OACnB,KAAdC,EACrBA,EAAYzE,OAAOyE,GACvB,MACF,IAAK,gBAEHA,GADAE,IDrGyC,MAArBZ,ECqGUU,IDpGtCV,EAAOhE,QAAU,IACdC,OAAO+D,IACP/D,OAAO+D,IAAW,GAClB/D,OAAO+D,IAAW,MCmGTU,EAAYzE,OAAOyE,GAAWK,QAAQ,GAC1C,MACF,IAAK,eAEHH,GAAa1E,EADbwE,EAAYA,GAAwB,SAEpC,MACF,IAAK,iBAAL,MACyCrE,EAAwBqE,GAC/DE,EAFF,EACUrE,WAERmE,EAHF,EACsBlE,eAGpB,MACF,IAAK,kBACHoE,GAAa1D,EAAyBwD,GACtC,MACF,IAAK,iBACHE,ID3BI,MADuBb,EC4BUW,ID3BrBrF,EAAeT,KAAKmF,ICkCxCS,GADoBI,EAAY,QAAU,IACnB1G,EAAQuG,IAAMC,EAInCnG,OAAOyG,OAAOR,GAAUS,QAAO,SAAAC,GAAC,OAAIA,KAAGlF,OAAS,GAClDoE,EAAKe,KAAKX,GAIdpB,ED5B+B,SAAAgB,GAC/B,IAAM9B,EAAY,YAAO8B,GAEnBgB,EAAQ,GACRC,EAAS,GACTC,EAAS,GAQf,OANAlB,EAAKmB,SAAS,SAACpD,EAAKI,GAChBL,EAAeC,EAAK,YAAaiD,EAAO9C,EAAcC,EAAO,aAC7DL,EAAeC,EAAK,QAASkD,EAAQ/C,EAAcC,EAAO,SAC1DL,EAAeC,EAAK,QAASmD,EAAQhD,EAAcC,EAAO,YAGvDD,ECeCkD,CAAoBpB,IAC5BjB,EAAWjF,QAhGToF,GAAa,IAqHjB,OACI,gCACE,8CAAgB,mBAAGmC,KAAK,8DAA8DC,OAAO,SAASC,IAAI,sBAA1F,gDAEhB,eAAC5C,EAAD,CAAO6C,QAAQ,OAAf,sFAEE,cAAC/C,EAAD,CACIgD,GAAG,OACHC,KAAK,OACLC,OAAO,OACPC,SA5Ba,SAAAC,GACvB,GAAKA,EAAEP,OAAOQ,MAAM,GAApB,CAEA,IAAMC,EAAOF,EAAEP,OAAOQ,MAAM,GAE5B,GAAKnH,EAAqBH,KAAKuH,EAAKxG,MAApC,CAKA,IAAMyG,EAAS,IAAIC,WACnBD,EAAOE,OAAS,SAACC,GACf,IAAMC,EAASD,EAAIb,OAAOc,OAC1BjD,EAAYiD,IAEdJ,EAAOK,mBAAmBN,QATxB7C,GAAa,UA0BTD,EACE,eAACV,EAAD,WACE,uCADF,gBAGE,+BACE,iDACA,kFACkD,uBADlD,yBAGE,+BACE,6CACA,yCACA,yCACA,uCACA,8CACA,iDACA,gDACA,kDACA,mDACA,qDAbJ,oEAiBA,sIAMJ,cAAC,EAAD,CACIzE,QAASA,EACTD,KAAMA,QC7OtByI,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.3c6b446b.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\n\r\nexport const propTypes = {\r\n    headers: PropTypes.array,\r\n    data: PropTypes.array,\r\n}\r\n\r\nexport const defaultProps = {\r\n    headers: [],\r\n    data: [],\r\n}","import React, { memo } from 'react';\r\nimport { propTypes, defaultProps } from './propTypes';\r\nimport styled from 'styled-components';\r\nconst shortid = require('shortid');\r\n\r\nconst Table = styled.table`\r\n  font-family: Arial, Helvetica, sans-serif;\r\n  border-collapse: collapse;\r\n  width: 100%;\r\n`;\r\n\r\nconst TableCell = styled.td`\r\n  text-align: center;\r\n  border: 1px solid #ddd;\r\n  padding: 8px;\r\n`;\r\n\r\nconst TableCellWithError = styled.td`\r\n  background: #f68888;\r\n`;\r\n\r\nconst TableHeader = styled.th`\r\n  border: 1px solid #ddd;\r\n  padding: 12px 8px;\r\n  text-align: left;\r\n  background-color: #4CAF50;\r\n  color: white;\r\n`;\r\n\r\nconst DataTable = memo(({ data, headers }) => {\r\n    return (\r\n        <Table>\r\n            <thead>\r\n                <tr>\r\n                    {headers.map(head => (\r\n                        <TableHeader key={shortid.generate()}>\r\n                            {head}\r\n                        </TableHeader>\r\n                    ))}\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {data.map( dataRow => (\r\n                    <tr key={dataRow.ID}>\r\n                        {Object.entries(dataRow).map(([dataKey,value]) =>\r\n                            <React.Fragment key={shortid.generate()}>\r\n                                {/error/g.test(dataKey) ?\r\n                                    (\r\n                                        <TableCellWithError>\r\n                                            {value}\r\n                                        </TableCellWithError>\r\n                                    ) : (\r\n                                        <TableCell>\r\n                                            {value}\r\n                                        </TableCell>\r\n                                    )\r\n                                }\r\n                            </React.Fragment>\r\n                        )}\r\n                    </tr>\r\n                ))}\r\n            </tbody>\r\n        </Table>\r\n    );\r\n});\r\n\r\nDataTable.propTypes = propTypes;\r\nDataTable.defaultProps = defaultProps;\r\n\r\nexport default DataTable;","export const patternFileExtension = /\\.csv+$/i, patternLinesSeparator = /\\r\\n|\\n/,\r\n    patternRowSeparator = /,(?![^\"]*\"(?:(?:[^\"]*\"){2})*[^\"]*$)/, patternFullName = /^[a-z]{4,}(?: [a-z]+){0,2}$/i,\r\n    patternPhone = /^(?:\\+1|1)?[0-9]{10}$/,\r\n    patternEmail = /^(([^<>()[\\].,;:\\s@\"]+(\\.[^<>()[\\].,;:\\s@\"]+)*)|(\".+\"))@(([^<>()[\\].,;:\\s@\"]+\\.)+[^<>()[\\].,;:\\s@\"]{2,})$/i,\r\n    patternLicense = /^[a-z0-9]{6}$/i, patternLicenseStates = /[a-z]{2,}(?:,)?/i,\r\n    patternFirstDateType = /^\\d{1,2}\\/\\d{1,2}\\/\\d{4}$/, patternSecondDateType = /^\\d{4}-\\d{1,2}-\\d{1,2}$/;","export const HEADERS = [\r\n    \"Full Name\",\r\n    \"Phone\",\r\n    \"Email\",\r\n    \"Age\",\r\n    \"Experience\",\r\n    \"Yearly Income\",\r\n    \"Has children\",\r\n    \"License states\",\r\n    \"Expiration date\",\r\n    \"License number\"\r\n]\r\n\r\nexport const USA_STATES = [\r\n    {\r\n        name: \"Alabama\",\r\n        abbreviation: \"AL\"\r\n    },\r\n    {\r\n        name: \"Alaska\",\r\n        abbreviation: \"AK\"\r\n    },\r\n    {\r\n        name: \"American Samoa\",\r\n        abbreviation: \"AS\"\r\n    },\r\n    {\r\n        name: \"Arizona\",\r\n        abbreviation: \"AZ\"\r\n    },\r\n    {\r\n        name: \"Arkansas\",\r\n        abbreviation: \"AR\"\r\n    },\r\n    {\r\n        name: \"California\",\r\n        abbreviation: \"CA\"\r\n    },\r\n    {\r\n        name: \"Colorado\",\r\n        abbreviation: \"CO\"\r\n    },\r\n    {\r\n        name: \"Connecticut\",\r\n        abbreviation: \"CT\"\r\n    },\r\n    {\r\n        name: \"Delaware\",\r\n        abbreviation: \"DE\"\r\n    },\r\n    {\r\n        name: \"District Of Columbia\",\r\n        abbreviation: \"DC\"\r\n    },\r\n    {\r\n        name: \"Federated States Of Micronesia\",\r\n        abbreviation: \"FM\"\r\n    },\r\n    {\r\n        name: \"Florida\",\r\n        abbreviation: \"FL\"\r\n    },\r\n    {\r\n        name: \"Georgia\",\r\n        abbreviation: \"GA\"\r\n    },\r\n    {\r\n        name: \"Guam\",\r\n        abbreviation: \"GU\"\r\n    },\r\n    {\r\n        name: \"Hawaii\",\r\n        abbreviation: \"HI\"\r\n    },\r\n    {\r\n        name: \"Idaho\",\r\n        abbreviation: \"ID\"\r\n    },\r\n    {\r\n        name: \"Illinois\",\r\n        abbreviation: \"IL\"\r\n    },\r\n    {\r\n        name: \"Indiana\",\r\n        abbreviation: \"IN\"\r\n    },\r\n    {\r\n        name: \"Iowa\",\r\n        abbreviation: \"IA\"\r\n    },\r\n    {\r\n        name: \"Kansas\",\r\n        abbreviation: \"KS\"\r\n    },\r\n    {\r\n        name: \"Kentucky\",\r\n        abbreviation: \"KY\"\r\n    },\r\n    {\r\n        name: \"Louisiana\",\r\n        abbreviation: \"LA\"\r\n    },\r\n    {\r\n        name: \"Maine\",\r\n        abbreviation: \"ME\"\r\n    },\r\n    {\r\n        name: \"Marshall Islands\",\r\n        abbreviation: \"MH\"\r\n    },\r\n    {\r\n        name: \"Maryland\",\r\n        abbreviation: \"MD\"\r\n    },\r\n    {\r\n        name: \"Massachusetts\",\r\n        abbreviation: \"MA\"\r\n    },\r\n    {\r\n        name: \"Michigan\",\r\n        abbreviation: \"MI\"\r\n    },\r\n    {\r\n        name: \"Minnesota\",\r\n        abbreviation: \"MN\"\r\n    },\r\n    {\r\n        name: \"Mississippi\",\r\n        abbreviation: \"MS\"\r\n    },\r\n    {\r\n        name: \"Missouri\",\r\n        abbreviation: \"MO\"\r\n    },\r\n    {\r\n        name: \"Montana\",\r\n        abbreviation: \"MT\"\r\n    },\r\n    {\r\n        name: \"Nebraska\",\r\n        abbreviation: \"NE\"\r\n    },\r\n    {\r\n        name: \"Nevada\",\r\n        abbreviation: \"NV\"\r\n    },\r\n    {\r\n        name: \"New Hampshire\",\r\n        abbreviation: \"NH\"\r\n    },\r\n    {\r\n        name: \"New Jersey\",\r\n        abbreviation: \"NJ\"\r\n    },\r\n    {\r\n        name: \"New Mexico\",\r\n        abbreviation: \"NM\"\r\n    },\r\n    {\r\n        name: \"New York\",\r\n        abbreviation: \"NY\"\r\n    },\r\n    {\r\n        name: \"North Carolina\",\r\n        abbreviation: \"NC\"\r\n    },\r\n    {\r\n        name: \"North Dakota\",\r\n        abbreviation: \"ND\"\r\n    },\r\n    {\r\n        name: \"Northern Mariana Islands\",\r\n        abbreviation: \"MP\"\r\n    },\r\n    {\r\n        name: \"Ohio\",\r\n        abbreviation: \"OH\"\r\n    },\r\n    {\r\n        name: \"Oklahoma\",\r\n        abbreviation: \"OK\"\r\n    },\r\n    {\r\n        name: \"Oregon\",\r\n        abbreviation: \"OR\"\r\n    },\r\n    {\r\n        name: \"Palau\",\r\n        abbreviation: \"PW\"\r\n    },\r\n    {\r\n        name: \"Pennsylvania\",\r\n        abbreviation: \"PA\"\r\n    },\r\n    {\r\n        name: \"Puerto Rico\",\r\n        abbreviation: \"PR\"\r\n    },\r\n    {\r\n        name: \"Rhode Island\",\r\n        abbreviation: \"RI\"\r\n    },\r\n    {\r\n        name: \"South Carolina\",\r\n        abbreviation: \"SC\"\r\n    },\r\n    {\r\n        name: \"South Dakota\",\r\n        abbreviation: \"SD\"\r\n    },\r\n    {\r\n        name: \"Tennessee\",\r\n        abbreviation: \"TN\"\r\n    },\r\n    {\r\n        name: \"Texas\",\r\n        abbreviation: \"TX\"\r\n    },\r\n    {\r\n        name: \"Utah\",\r\n        abbreviation: \"UT\"\r\n    },\r\n    {\r\n        name: \"Vermont\",\r\n        abbreviation: \"VT\"\r\n    },\r\n    {\r\n        name: \"Virgin Islands\",\r\n        abbreviation: \"VI\"\r\n    },\r\n    {\r\n        name: \"Virginia\",\r\n        abbreviation: \"VA\"\r\n    },\r\n    {\r\n        name: \"Washington\",\r\n        abbreviation: \"WA\"\r\n    },\r\n    {\r\n        name: \"West Virginia\",\r\n        abbreviation: \"WV\"\r\n    },\r\n    {\r\n        name: \"Wisconsin\",\r\n        abbreviation: \"WI\"\r\n    },\r\n    {\r\n        name: \"Wyoming\",\r\n        abbreviation: \"WY\"\r\n    }\r\n]","import {\r\n    patternEmail,\r\n    patternFirstDateType,\r\n    patternFullName, patternLicense,\r\n    patternLicenseStates,\r\n    patternPhone,\r\n    patternSecondDateType\r\n} from \"./regex\";\r\nimport {HEADERS, USA_STATES} from \"./utils\";\r\n\r\nexport const headersValidation = headers => {\r\n    if (headers.length !== HEADERS.length) {\r\n        return false;\r\n    }\r\n\r\n    return headers\r\n        .every((header, index) => {\r\n            const preparedHeader = header.trim();\r\n            const patternHeader = new RegExp(preparedHeader, \"i\");\r\n\r\n            return patternHeader.test(HEADERS[index]);\r\n        })\r\n};\r\n\r\nexport const fullNameValidation = fullName => patternFullName.test(fullName);\r\n\r\nexport const phoneValidation = phone => patternPhone.test(phone);\r\n\r\nexport const emailValidation = email => patternEmail.test(email);\r\n\r\nexport const ageValidation = age => age === '' ? true :\r\n    age.length === 2\r\n    && Number(age)\r\n    && Number(age) >= 21;\r\n\r\nexport const experienceValidation = (experience, age = 21) => experience === '' ? true :\r\n    experience.length === 2\r\n    && Number(experience)\r\n    && Number(experience) >= 0\r\n    && Number(age ? age : 21) - Number(experience) >= 18;\r\n\r\nexport const incomeValidation = income => income === '' ? true :\r\n    income.length <= 12\r\n    && Number(income)\r\n    && Number(income) >= 0\r\n    && Number(income) <= 1000000;\r\n\r\nexport const hasChildrenValidation = hasChildren =>\r\n    ['TRUE', 'FALSE'].some( value => value === hasChildren);\r\n\r\nexport const licenseStatesValidation = states => {\r\n    if (!patternLicenseStates.test(states)) {\r\n        return {\r\n            errorState: !(states === ''),\r\n            preparedStates: states,\r\n        }\r\n    }\r\n\r\n    let errorState = false;\r\n    const preparedStates = states\r\n        .split(', ')\r\n        .map( state => {\r\n            if (state.length === 2) {\r\n                const isValidState = USA_STATES\r\n                    .some( existingState =>\r\n                        state.toUpperCase() === existingState.abbreviation );\r\n\r\n                errorState = !isValidState;\r\n                return isValidState ? state.toUpperCase() : state;\r\n            } else if (state.length > 2) {\r\n                const validStateObj = USA_STATES\r\n                    .find( existingState => {\r\n                        return state === existingState.name\r\n                    } );\r\n\r\n                errorState = !Boolean(validStateObj);\r\n                return errorState ? state : validStateObj.abbreviation;\r\n            } else {\r\n                errorState = state;\r\n                return state;\r\n            }\r\n        })\r\n        .join(', ');\r\n\r\n    return {\r\n        errorState,\r\n        preparedStates\r\n    }\r\n}\r\n\r\nexport const expirationDateValidation = date => {\r\n    if (date === '') return true;\r\n\r\n    if (!patternFirstDateType.test(date) && !patternSecondDateType.test(date))\r\n        return false;\r\n\r\n    const now = new Date();\r\n    const nowDay = now.getDate();\r\n    const nowMonth = now.getMonth();\r\n    const nowYear = now.getFullYear();\r\n\r\n    let parts, day, month, year;\r\n    if(patternFirstDateType.test(date)){\r\n        parts = date.split(\"/\");\r\n        day = parseInt(parts[1], 10);\r\n        month = parseInt(parts[0], 10);\r\n        year = parseInt(parts[2], 10);\r\n    }\r\n\r\n    if(patternSecondDateType.test(date)){\r\n        parts = date.split(\"-\");\r\n        day = parseInt(parts[2], 10);\r\n        month = parseInt(parts[1], 10);\r\n        year = parseInt(parts[0], 10);\r\n    }\r\n\r\n    const monthLength = [ 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 ];\r\n\r\n    if(year % 400 === 0 || (year % 100 !== 0 && year % 4 === 0))\r\n        monthLength[1] = 29;\r\n\r\n    return year >= nowYear\r\n        && year < 3000\r\n        && month >= 0\r\n        && month < 12\r\n        && day > 0\r\n        && day <= monthLength[month - 1]\r\n        && (year === nowYear ? month >= nowMonth : true)\r\n        && (year === nowYear && month === nowMonth ? date >= nowDay : true);\r\n}\r\n\r\nexport const licenseNumberValidation = license =>\r\n    license === '' ? true : patternLicense.test(license);\r\n\r\n\r\nconst findDuplicate = ( row, key, obj, preparedRows, index, message ) => {\r\n    if(row[key]) {\r\n        if (obj.hasOwnProperty(row[key])){\r\n            if (!preparedRows[obj[row[key]]]['Duplicate with'].includes(message))\r\n                preparedRows[obj[row[key]]]['Duplicate with'] += ` [${row['ID']} - ${message}] `\r\n        } else {\r\n            if (row[key])\r\n                obj[row[key]] = index;\r\n        }\r\n    }\r\n}\r\n\r\nexport const duplicateValidation = rows => {\r\n    const preparedRows = [...rows];\r\n\r\n    const names = {};\r\n    const phones = {};\r\n    const emails = {};\r\n\r\n    rows.forEach( (row, index) => {\r\n        findDuplicate( row, \"Full Name\", names, preparedRows, index, 'Full Name' );\r\n        findDuplicate( row, \"Phone\", phones, preparedRows, index, 'Phone' );\r\n        findDuplicate( row, \"Email\", emails, preparedRows, index, 'Email' );\r\n    })\r\n\r\n    return preparedRows;\r\n}","import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport DataTable from './DataTable';\r\n\r\nimport {\r\n  headersValidation,\r\n  fullNameValidation,\r\n  phoneValidation,\r\n  emailValidation,\r\n  ageValidation,\r\n  experienceValidation,\r\n  incomeValidation,\r\n  hasChildrenValidation,\r\n  licenseStatesValidation,\r\n  expirationDateValidation,\r\n  licenseNumberValidation,\r\n  duplicateValidation\r\n} from './validation-functions'\r\n\r\nimport {\r\n  patternFileExtension,\r\n  patternLinesSeparator,\r\n  patternRowSeparator\r\n} from \"./regex\";\r\n\r\nimport {HEADERS} from \"./utils\";\r\n\r\nconst Error = styled.div`\r\n  color: #ba3939;\r\n  background: #ffe0e0;\r\n  border: 1px solid #a33a3a;\r\n  max-width: 600px;\r\n  margin: 0 auto;\r\n  padding: 0 20px;\r\n`;\r\n\r\n\r\nconst Input = styled.input`\r\n  width: 0.1px;\r\n  height: 0.1px;\r\n  opacity: 0;\r\n  overflow: hidden;\r\n  position: absolute;\r\n  z-index: -1;\r\n`;\r\n\r\nconst Label = styled.label`\r\n  width: 180px;\r\n  height: 50px;\r\n  border-radius: 4px;\r\n  text-align: center;\r\n  cursor: pointer;\r\n  display: block;\r\n  font: 14px/50px Tahoma;\r\n  transition: all 0.18s ease-in-out;\r\n  border: 1px solid #333;\r\n  color: #333;\r\n  background: #eeee4a;\r\n  margin: 50px 0 20px;\r\n\r\n  &:hover {\r\n    color: white;\r\n    background: #333;\r\n  }\r\n`;\r\n\r\nfunction App() {\r\n  const [headers, setHeaders] = useState([]);\r\n  const [data, setData] = useState([]);\r\n  const [fileError, setFileError] = useState(false);\r\n\r\n\r\n  const processData = data => {\r\n    setFileError(false);\r\n\r\n    const lines = data.split(patternLinesSeparator);\r\n    let headers = lines[0].split(patternRowSeparator);\r\n\r\n    if (!headersValidation(headers)) {\r\n      setFileError(true);\r\n      return;\r\n    }\r\n\r\n    headers = [\r\n      \"ID\",\r\n      ...HEADERS,\r\n      \"Duplicate with\",\r\n    ];\r\n\r\n    const rows = [];\r\n    for (let i = 1; i < lines.length; i++) {\r\n      const row = [\r\n        String(i),\r\n        ...lines[i]\r\n            .split(patternRowSeparator)\r\n            .map(item => item.trim()),\r\n        '',\r\n      ];\r\n\r\n      const requiredFieldsAreFilled = row[1] && row[2] && row[3];\r\n      if (!requiredFieldsAreFilled){\r\n        setFileError(true);\r\n        return;\r\n      }\r\n\r\n      const rowsData = {};\r\n      for (let j = 0; j < headers.length; j++) {\r\n        let cellValue = row[j];\r\n\r\n        if (cellValue.length > 0) {\r\n          if (cellValue[0] === '\"') cellValue = cellValue.substring(1, cellValue.length - 1);\r\n          if (cellValue[cellValue.length - 1] === '\"') cellValue = cellValue.substring(cellValue.length - 2, 1);\r\n        }\r\n\r\n        let cellError = false;\r\n\r\n        switch (headers[j]) {\r\n          case 'Full Name':\r\n            cellError = !fullNameValidation(cellValue);\r\n            break;\r\n          case 'Phone':\r\n            cellError = !phoneValidation(cellValue);\r\n            cellValue = cellError ?\r\n                cellValue : `+1${cellValue.slice(-10)}`;\r\n            break;\r\n          case 'Email':\r\n            cellError = !emailValidation(cellValue);\r\n            cellValue = cellError ?\r\n                cellValue : cellValue.toLowerCase();\r\n            break;\r\n          case 'Age':\r\n            cellError = !ageValidation(cellValue);\r\n            cellValue = cellError || cellValue === '' ?\r\n                cellValue : Number(cellValue);\r\n            break;\r\n          case 'Experience':\r\n            cellError = !experienceValidation(cellValue, Number(row[j-1]));\r\n            cellValue = cellError || cellValue === '' ?\r\n                cellValue : Number(cellValue);\r\n            break;\r\n          case 'Yearly Income':\r\n            cellError = !incomeValidation(cellValue);\r\n            cellValue = cellError ?\r\n                cellValue : Number(cellValue).toFixed(2);\r\n            break;\r\n          case 'Has children':\r\n            cellValue = cellValue ? cellValue : 'FALSE';\r\n            cellError = !hasChildrenValidation(cellValue);\r\n            break;\r\n          case 'License states':\r\n            const { errorState, preparedStates } = licenseStatesValidation(cellValue)\r\n            cellError = errorState;\r\n            cellValue = preparedStates;\r\n            break;\r\n          case 'Expiration date':\r\n            cellError = !expirationDateValidation(cellValue);\r\n            break;\r\n          case 'License number':\r\n            cellError = !licenseNumberValidation(cellValue);\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n\r\n        const errorPrefix = cellError ? 'error' : '';\r\n        rowsData[errorPrefix + headers[j]] = cellValue;\r\n      }\r\n\r\n      // remove the blank rows\r\n      if (Object.values(rowsData).filter(x => x).length > 0) {\r\n        rows.push(rowsData);\r\n      }\r\n    }\r\n\r\n    setData(duplicateValidation(rows));\r\n    setHeaders(headers);\r\n  }\r\n\r\n  const handleFileUpload = e => {\r\n    if (!e.target.files[0]) return;\r\n\r\n    const file = e.target.files[0];\r\n\r\n    if (!patternFileExtension.test(file.name)){\r\n      setFileError(true);\r\n      return;\r\n    }\r\n\r\n    const reader = new FileReader();\r\n    reader.onload = (evt) => {\r\n      const result = evt.target.result;\r\n      processData(result);\r\n    };\r\n    reader.readAsBinaryString(file);\r\n  }\r\n\r\n  return (\r\n      <div>\r\n        <h3>Applicant - <a href=\"https://www.linkedin.com/in/khrystyna-yelyseyeva-378b2319a/\" target=\"_blank\" rel=\"noopener noreferrer\">Khrystyna Yelyseyeva (Linkedin)</a></h3>\r\n\r\n        <Label htmlFor=\"file\">\r\n          Виберіть файл\r\n          <Input\r\n              id=\"file\"\r\n              type=\"file\"\r\n              accept=\".csv\"\r\n              onChange={handleFileUpload}\r\n          />\r\n        </Label>\r\n\r\n        { fileError ?\r\n            <Error>\r\n              <h4>Error</h4>\r\n              Please check:\r\n              <ul>\r\n                <li>File extension.</li>\r\n                <li>\r\n                  Correctness and sequence of writing table heads.<br/>\r\n                  Here's what we expect:\r\n                  <ul>\r\n                    <li>\"Full Name\"</li>\r\n                    <li>\"Phone\"</li>\r\n                    <li>\"Email\"</li>\r\n                    <li>\"Age\"</li>\r\n                    <li>\"Experience\"</li>\r\n                    <li>\"Yearly Income\"</li>\r\n                    <li>\"Has children\"</li>\r\n                    <li>\"License states\"</li>\r\n                    <li>\"Expiration date\"</li>\r\n                    <li>\"License number\"</li>\r\n                  </ul>\r\n                  Don't add \"ID\" or \"Duplicate with\". We make it automatically.\r\n                </li>\r\n                <li>\r\n                  The fullness of all the cells in the columns \"Full name\", \"Phone\", \"Email\".\r\n                  They are required.\r\n                </li>\r\n              </ul>\r\n            </Error> :\r\n            <DataTable\r\n                headers={headers}\r\n                data={data}\r\n            />\r\n        }\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}
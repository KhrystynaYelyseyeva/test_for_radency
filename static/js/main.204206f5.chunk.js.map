{"version":3,"sources":["regex.js","App.js","index.js"],"names":["patternFileExtension","patternLinesSeparator","patternRowSeparator","App","useState","columns","setColumns","data","setData","fileExtensionError","setFileExtensionError","href","target","rel","type","accept","onChange","e","file","files","test","name","reader","FileReader","onload","evt","lines","split","headers","console","log","list","i","length","row","obj","j","d","substring","Object","values","filter","x","push","map","c","selector","processData","result","readAsBinaryString","pagination","highlightOnHover","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2NAAaA,EAAuB,WACvBC,EAAwB,UACxBC,EAAsB,sCCgGpBC,MAxFf,WAAgB,IAAD,EACiBC,mBAAS,IAD1B,mBACNC,EADM,KACGC,EADH,OAEWF,mBAAS,IAFpB,mBAENG,EAFM,KAEAC,EAFA,OAGuCJ,oBAAS,GAHhD,mBAGNK,EAHM,KAGcC,EAHd,KAmEb,OACI,gCACE,8CAAgB,mBAAGC,KAAK,8DAA8DC,OAAO,SAASC,IAAI,sBAA1F,gDAChB,uBACIC,KAAK,OACLC,OAAO,OACPC,SAtBe,SAAAC,GACvB,IAAMC,EAAOD,EAAEL,OAAOO,MAAM,GAE5B,GAAKnB,EAAqBoB,KAAKF,EAAKG,MAApC,CAKA,IAAMC,EAAS,IAAIC,WACnBD,EAAOE,OAAS,SAACC,IAnDC,SAAAlB,GAClB,IAAMmB,EAAQnB,EAAKoB,MAAM1B,GACnB2B,EAAUF,EAAM,GAAGC,MAAMzB,GAG/B2B,QAAQC,IAAIJ,GAEZ,IADA,IAAMK,EAAO,GACJC,EAAI,EAAGA,EAAIN,EAAMO,OAAQD,IAAK,CACrC,IAAME,EAAMR,EAAMM,GAAGL,MAAMzB,GAC3B,GAAI0B,GAAWM,EAAID,SAAWL,EAAQK,OAAQ,CAE5C,IADA,IAAME,EAAM,GACHC,EAAI,EAAGA,EAAIR,EAAQK,OAAQG,IAAK,CACvC,IAAIC,EAAIH,EAAIE,GACRC,EAAEJ,OAAS,IACA,MAATI,EAAE,KACJA,EAAIA,EAAEC,UAAU,EAAGD,EAAEJ,OAAS,IACR,MAApBI,EAAEA,EAAEJ,OAAS,KACfI,EAAIA,EAAEC,UAAUD,EAAEJ,OAAS,EAAG,KAE9BL,EAAQQ,KACVD,EAAIP,EAAQQ,IAAMC,GAKlBE,OAAOC,OAAOL,GAAKM,QAAO,SAAAC,GAAC,OAAIA,KAAGT,OAAS,GAC7CF,EAAKY,KAAKR,IAIhBN,QAAQC,IAAIC,GAEZ,IAAM1B,EAAUuB,EAAQgB,KAAI,SAAAC,GAAC,MAAK,CAChCxB,KAAMwB,EACNC,SAAUD,MAEZhB,QAAQC,IAAIzB,GAEZG,EAAQuB,GACRzB,EAAWD,GAcT0C,CADetB,EAAIb,OAAOoC,SAG5B1B,EAAO2B,mBAAmB/B,QATxBR,GAAsB,MAoBlBD,EACE,sCACA,cAAC,IAAD,CACIyC,YAAU,EACVC,kBAAgB,EAChB9C,QAASA,EACTE,KAAMA,QCtFtB6C,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.204206f5.chunk.js","sourcesContent":["export const patternFileExtension = /\\.csv+$/i;\r\nexport const patternLinesSeparator = /\\r\\n|\\n/;\r\nexport const patternRowSeparator = /,(?![^\"]*\"(?:(?:[^\"]*\"){2})*[^\"]*$)/;","import React, { useState } from 'react';\nimport DataTable from 'react-data-table-component';\n\nimport {\n  patternFileExtension,\n  patternLinesSeparator,\n  patternRowSeparator,\n} from \"./regex\";\nimport { HEADERS } from \"./utils\";\n\nfunction App() {\n  const [columns, setColumns] = useState([]);\n  const [data, setData] = useState([]);\n  const [fileExtensionError, setFileExtensionError] = useState(false);\n\n  const validationHeader = headers => {\n\n  }\n\n  const processData = data => {\n    const lines = data.split(patternLinesSeparator);\n    const headers = lines[0].split(patternRowSeparator);\n\n    validationHeader(headers);\n    console.log(lines)\n    const list = [];\n    for (let i = 1; i < lines.length; i++) {\n      const row = lines[i].split(patternRowSeparator);\n      if (headers && row.length === headers.length) {\n        const obj = {};\n        for (let j = 0; j < headers.length; j++) {\n          let d = row[j];\n          if (d.length > 0) {\n            if (d[0] === '\"')\n              d = d.substring(1, d.length - 1);\n            if (d[d.length - 1] === '\"')\n              d = d.substring(d.length - 2, 1);\n          }\n          if (headers[j]) {\n            obj[headers[j]] = d;\n          }\n        }\n\n        // remove the blank rows\n        if (Object.values(obj).filter(x => x).length > 0) {\n          list.push(obj);\n        }\n      }\n    }\n    console.log(list)\n    // prepare columns list from headers\n    const columns = headers.map(c => ({\n      name: c,\n      selector: c,\n    }));\n    console.log(columns)\n\n    setData(list);\n    setColumns(columns);\n  }\n\n  const handleFileUpload = e => {\n    const file = e.target.files[0];\n\n    if (!patternFileExtension.test(file.name)){\n      setFileExtensionError(true);\n      return;\n    }\n\n    const reader = new FileReader();\n    reader.onload = (evt) => {\n      const result = evt.target.result;\n      processData(result);\n    };\n    reader.readAsBinaryString(file);\n  }\n\n  return (\n      <div>\n        <h3>Applicant - <a href=\"https://www.linkedin.com/in/khrystyna-yelyseyeva-378b2319a/\" target=\"_blank\" rel=\"noopener noreferrer\">Khrystyna Yelyseyeva (Linkedin)</a></h3>\n        <input\n            type=\"file\"\n            accept=\".csv\"\n            onChange={handleFileUpload}\n        />\n        { fileExtensionError ?\n            <p>Error</p> :\n            <DataTable\n                pagination\n                highlightOnHover\n                columns={columns}\n                data={data}\n            />\n        }\n      </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}
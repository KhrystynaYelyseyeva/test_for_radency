{"version":3,"sources":["propTypes.js","DataTable.js","regex.js","utils.js","App.js","index.js"],"names":["PropTypes","array","shortid","require","Table","styled","table","TableCell","td","TableCellWithError","TableHeader","th","DataTable","memo","data","headers","map","head","generate","dataRow","Object","entries","dataKey","value","Fragment","test","ID","defaultProps","patternFileExtension","patternLinesSeparator","patternRowSeparator","patternFullName","patternPhone","patternLicense","patternLicenseStates","patternFirstDateType","patternSecondDateType","HEADERS","USA_STATES","name","abbreviation","Input","input","Label","label","App","useState","setHeaders","setData","fileError","setFileError","experienceValidation","experience","age","length","Number","hasChildrenValidation","hasChildren","some","licenseStatesValidation","states","errorState","preparedStates","split","state","isValidState","existingState","toUpperCase","validStateObj","find","Boolean","join","expirationDateValidation","date","parts","day","month","year","now","Date","nowDay","getDate","nowMonth","getMonth","nowYear","getFullYear","parseInt","monthLength","processData","lines","every","header","index","preparedHeader","trim","RegExp","headersValidation","license","income","phone","fullName","rows","i","row","String","item","rowsData","j","cellValue","substring","cellError","slice","toFixed","values","filter","x","push","console","log","href","target","rel","htmlFor","id","type","accept","onChange","e","files","file","reader","FileReader","onload","evt","result","readAsBinaryString","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kPAGaA,IAAUC,MACbD,IAAUC,M,wkBCDpB,IAAMC,EAAUC,EAAQ,IAElBC,EAAQC,IAAOC,MAAV,KAMLC,EAAYF,IAAOG,GAAV,KAMTC,EAAqBJ,IAAOG,GAAV,KAIlBE,EAAcL,IAAOM,GAAV,KAQXC,EAAYC,gBAAK,YAAwB,IAArBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,QAC5B,OACI,eAACX,EAAD,WACI,gCACI,6BACKW,EAAQC,KAAI,SAAAC,GAAI,OACb,cAACP,EAAD,UACKO,GADaf,EAAQgB,mBAMtC,gCACKJ,EAAKE,KAAK,SAAAG,GAAO,OACd,6BACKC,OAAOC,QAAQF,GAASH,KAAI,mCAAEM,EAAF,KAAUC,EAAV,YACzB,cAAC,IAAMC,SAAP,UACK,SAASC,KAAKH,GAEP,cAACb,EAAD,UACKc,IAGL,cAAChB,EAAD,UACKgB,KARIrB,EAAQgB,gBAF5BC,EAAQO,eAwBrCd,EAAUe,aD5DkB,CACxBZ,QAAS,GACTD,KAAM,IC4DKF,QCrEFgB,EAAuB,WACvBC,EAAwB,UACxBC,EAAsB,sCACtBC,EAAkB,+BAClBC,EAAe,wBACfC,EAAiB,iBACjBC,EAAuB,mBACvBC,EAAuB,4BACvBC,EAAwB,0BCRxBC,EAAU,CACnB,YACA,QACA,QACA,MACA,aACA,gBACA,eACA,iBACA,kBACA,kBAGSC,EAAa,CACtB,CACIC,KAAM,UACNC,aAAc,MAElB,CACID,KAAM,SACNC,aAAc,MAElB,CACID,KAAM,iBACNC,aAAc,MAElB,CACID,KAAM,UACNC,aAAc,MAElB,CACID,KAAM,WACNC,aAAc,MAElB,CACID,KAAM,aACNC,aAAc,MAElB,CACID,KAAM,WACNC,aAAc,MAElB,CACID,KAAM,cACNC,aAAc,MAElB,CACID,KAAM,WACNC,aAAc,MAElB,CACID,KAAM,uBACNC,aAAc,MAElB,CACID,KAAM,iCACNC,aAAc,MAElB,CACID,KAAM,UACNC,aAAc,MAElB,CACID,KAAM,UACNC,aAAc,MAElB,CACID,KAAM,OACNC,aAAc,MAElB,CACID,KAAM,SACNC,aAAc,MAElB,CACID,KAAM,QACNC,aAAc,MAElB,CACID,KAAM,WACNC,aAAc,MAElB,CACID,KAAM,UACNC,aAAc,MAElB,CACID,KAAM,OACNC,aAAc,MAElB,CACID,KAAM,SACNC,aAAc,MAElB,CACID,KAAM,WACNC,aAAc,MAElB,CACID,KAAM,YACNC,aAAc,MAElB,CACID,KAAM,QACNC,aAAc,MAElB,CACID,KAAM,mBACNC,aAAc,MAElB,CACID,KAAM,WACNC,aAAc,MAElB,CACID,KAAM,gBACNC,aAAc,MAElB,CACID,KAAM,WACNC,aAAc,MAElB,CACID,KAAM,YACNC,aAAc,MAElB,CACID,KAAM,cACNC,aAAc,MAElB,CACID,KAAM,WACNC,aAAc,MAElB,CACID,KAAM,UACNC,aAAc,MAElB,CACID,KAAM,WACNC,aAAc,MAElB,CACID,KAAM,SACNC,aAAc,MAElB,CACID,KAAM,gBACNC,aAAc,MAElB,CACID,KAAM,aACNC,aAAc,MAElB,CACID,KAAM,aACNC,aAAc,MAElB,CACID,KAAM,WACNC,aAAc,MAElB,CACID,KAAM,iBACNC,aAAc,MAElB,CACID,KAAM,eACNC,aAAc,MAElB,CACID,KAAM,2BACNC,aAAc,MAElB,CACID,KAAM,OACNC,aAAc,MAElB,CACID,KAAM,WACNC,aAAc,MAElB,CACID,KAAM,SACNC,aAAc,MAElB,CACID,KAAM,QACNC,aAAc,MAElB,CACID,KAAM,eACNC,aAAc,MAElB,CACID,KAAM,cACNC,aAAc,MAElB,CACID,KAAM,eACNC,aAAc,MAElB,CACID,KAAM,iBACNC,aAAc,MAElB,CACID,KAAM,eACNC,aAAc,MAElB,CACID,KAAM,YACNC,aAAc,MAElB,CACID,KAAM,QACNC,aAAc,MAElB,CACID,KAAM,OACNC,aAAc,MAElB,CACID,KAAM,UACNC,aAAc,MAElB,CACID,KAAM,iBACNC,aAAc,MAElB,CACID,KAAM,WACNC,aAAc,MAElB,CACID,KAAM,aACNC,aAAc,MAElB,CACID,KAAM,gBACNC,aAAc,MAElB,CACID,KAAM,YACNC,aAAc,M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","file":"static/js/main.ac960d23.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\n\r\nexport const propTypes = {\r\n    headers: PropTypes.array,\r\n    data: PropTypes.array,\r\n}\r\n\r\nexport const defaultProps = {\r\n    headers: [],\r\n    data: [],\r\n}","import React, { memo } from 'react';\r\nimport { propTypes, defaultProps } from './propTypes';\r\nimport styled from 'styled-components';\r\nconst shortid = require('shortid');\r\n\r\nconst Table = styled.table`\r\n  font-family: Arial, Helvetica, sans-serif;\r\n  border-collapse: collapse;\r\n  width: 100%;\r\n`;\r\n\r\nconst TableCell = styled.td`\r\n  text-align: center;\r\n  border: 1px solid #ddd;\r\n  padding: 8px;\r\n`;\r\n\r\nconst TableCellWithError = styled.td`\r\n  background: #f68888;\r\n`;\r\n\r\nconst TableHeader = styled.th`\r\n  border: 1px solid #ddd;\r\n  padding: 12px 8px;\r\n  text-align: left;\r\n  background-color: #4CAF50;\r\n  color: white;\r\n`;\r\n\r\nconst DataTable = memo(({ data, headers }) => {\r\n    return (\r\n        <Table>\r\n            <thead>\r\n                <tr>\r\n                    {headers.map(head => (\r\n                        <TableHeader key={shortid.generate()}>\r\n                            {head}\r\n                        </TableHeader>\r\n                    ))}\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {data.map( dataRow => (\r\n                    <tr key={dataRow.ID}>\r\n                        {Object.entries(dataRow).map(([dataKey,value]) =>\r\n                            <React.Fragment key={shortid.generate()}>\r\n                                {/error/g.test(dataKey) ?\r\n                                    (\r\n                                        <TableCellWithError>\r\n                                            {value}\r\n                                        </TableCellWithError>\r\n                                    ) : (\r\n                                        <TableCell>\r\n                                            {value}\r\n                                        </TableCell>\r\n                                    )\r\n                                }\r\n                            </React.Fragment>\r\n                        )}\r\n                    </tr>\r\n                ))}\r\n            </tbody>\r\n        </Table>\r\n    );\r\n});\r\n\r\nDataTable.propTypes = propTypes;\r\nDataTable.defaultProps = defaultProps;\r\n\r\nexport default DataTable;","export const patternFileExtension = /\\.csv+$/i;\r\nexport const patternLinesSeparator = /\\r\\n|\\n/;\r\nexport const patternRowSeparator = /,(?![^\"]*\"(?:(?:[^\"]*\"){2})*[^\"]*$)/;\r\nexport const patternFullName = /^[a-z]{4,}(?: [a-z]+){0,2}$/i;\r\nexport const patternPhone = /^(?:\\+1|1)?[0-9]{10}$/;\r\nexport const patternLicense = /^[a-z0-9]{6}$/i;\r\nexport const patternLicenseStates = /[a-z]{2,}(?:,)?/i;\r\nexport const patternFirstDateType = /^\\d{1,2}\\/\\d{1,2}\\/\\d{4}$/;\r\nexport const patternSecondDateType = /^\\d{4}-\\d{1,2}-\\d{1,2}$/;","export const HEADERS = [\r\n    \"Full Name\",\r\n    \"Phone\",\r\n    \"Email\",\r\n    \"Age\",\r\n    \"Experience\",\r\n    \"Yearly Income\",\r\n    \"Has children\",\r\n    \"License states\",\r\n    \"Expiration date\",\r\n    \"License number\"\r\n]\r\n\r\nexport const USA_STATES = [\r\n    {\r\n        name: \"Alabama\",\r\n        abbreviation: \"AL\"\r\n    },\r\n    {\r\n        name: \"Alaska\",\r\n        abbreviation: \"AK\"\r\n    },\r\n    {\r\n        name: \"American Samoa\",\r\n        abbreviation: \"AS\"\r\n    },\r\n    {\r\n        name: \"Arizona\",\r\n        abbreviation: \"AZ\"\r\n    },\r\n    {\r\n        name: \"Arkansas\",\r\n        abbreviation: \"AR\"\r\n    },\r\n    {\r\n        name: \"California\",\r\n        abbreviation: \"CA\"\r\n    },\r\n    {\r\n        name: \"Colorado\",\r\n        abbreviation: \"CO\"\r\n    },\r\n    {\r\n        name: \"Connecticut\",\r\n        abbreviation: \"CT\"\r\n    },\r\n    {\r\n        name: \"Delaware\",\r\n        abbreviation: \"DE\"\r\n    },\r\n    {\r\n        name: \"District Of Columbia\",\r\n        abbreviation: \"DC\"\r\n    },\r\n    {\r\n        name: \"Federated States Of Micronesia\",\r\n        abbreviation: \"FM\"\r\n    },\r\n    {\r\n        name: \"Florida\",\r\n        abbreviation: \"FL\"\r\n    },\r\n    {\r\n        name: \"Georgia\",\r\n        abbreviation: \"GA\"\r\n    },\r\n    {\r\n        name: \"Guam\",\r\n        abbreviation: \"GU\"\r\n    },\r\n    {\r\n        name: \"Hawaii\",\r\n        abbreviation: \"HI\"\r\n    },\r\n    {\r\n        name: \"Idaho\",\r\n        abbreviation: \"ID\"\r\n    },\r\n    {\r\n        name: \"Illinois\",\r\n        abbreviation: \"IL\"\r\n    },\r\n    {\r\n        name: \"Indiana\",\r\n        abbreviation: \"IN\"\r\n    },\r\n    {\r\n        name: \"Iowa\",\r\n        abbreviation: \"IA\"\r\n    },\r\n    {\r\n        name: \"Kansas\",\r\n        abbreviation: \"KS\"\r\n    },\r\n    {\r\n        name: \"Kentucky\",\r\n        abbreviation: \"KY\"\r\n    },\r\n    {\r\n        name: \"Louisiana\",\r\n        abbreviation: \"LA\"\r\n    },\r\n    {\r\n        name: \"Maine\",\r\n        abbreviation: \"ME\"\r\n    },\r\n    {\r\n        name: \"Marshall Islands\",\r\n        abbreviation: \"MH\"\r\n    },\r\n    {\r\n        name: \"Maryland\",\r\n        abbreviation: \"MD\"\r\n    },\r\n    {\r\n        name: \"Massachusetts\",\r\n        abbreviation: \"MA\"\r\n    },\r\n    {\r\n        name: \"Michigan\",\r\n        abbreviation: \"MI\"\r\n    },\r\n    {\r\n        name: \"Minnesota\",\r\n        abbreviation: \"MN\"\r\n    },\r\n    {\r\n        name: \"Mississippi\",\r\n        abbreviation: \"MS\"\r\n    },\r\n    {\r\n        name: \"Missouri\",\r\n        abbreviation: \"MO\"\r\n    },\r\n    {\r\n        name: \"Montana\",\r\n        abbreviation: \"MT\"\r\n    },\r\n    {\r\n        name: \"Nebraska\",\r\n        abbreviation: \"NE\"\r\n    },\r\n    {\r\n        name: \"Nevada\",\r\n        abbreviation: \"NV\"\r\n    },\r\n    {\r\n        name: \"New Hampshire\",\r\n        abbreviation: \"NH\"\r\n    },\r\n    {\r\n        name: \"New Jersey\",\r\n        abbreviation: \"NJ\"\r\n    },\r\n    {\r\n        name: \"New Mexico\",\r\n        abbreviation: \"NM\"\r\n    },\r\n    {\r\n        name: \"New York\",\r\n        abbreviation: \"NY\"\r\n    },\r\n    {\r\n        name: \"North Carolina\",\r\n        abbreviation: \"NC\"\r\n    },\r\n    {\r\n        name: \"North Dakota\",\r\n        abbreviation: \"ND\"\r\n    },\r\n    {\r\n        name: \"Northern Mariana Islands\",\r\n        abbreviation: \"MP\"\r\n    },\r\n    {\r\n        name: \"Ohio\",\r\n        abbreviation: \"OH\"\r\n    },\r\n    {\r\n        name: \"Oklahoma\",\r\n        abbreviation: \"OK\"\r\n    },\r\n    {\r\n        name: \"Oregon\",\r\n        abbreviation: \"OR\"\r\n    },\r\n    {\r\n        name: \"Palau\",\r\n        abbreviation: \"PW\"\r\n    },\r\n    {\r\n        name: \"Pennsylvania\",\r\n        abbreviation: \"PA\"\r\n    },\r\n    {\r\n        name: \"Puerto Rico\",\r\n        abbreviation: \"PR\"\r\n    },\r\n    {\r\n        name: \"Rhode Island\",\r\n        abbreviation: \"RI\"\r\n    },\r\n    {\r\n        name: \"South Carolina\",\r\n        abbreviation: \"SC\"\r\n    },\r\n    {\r\n        name: \"South Dakota\",\r\n        abbreviation: \"SD\"\r\n    },\r\n    {\r\n        name: \"Tennessee\",\r\n        abbreviation: \"TN\"\r\n    },\r\n    {\r\n        name: \"Texas\",\r\n        abbreviation: \"TX\"\r\n    },\r\n    {\r\n        name: \"Utah\",\r\n        abbreviation: \"UT\"\r\n    },\r\n    {\r\n        name: \"Vermont\",\r\n        abbreviation: \"VT\"\r\n    },\r\n    {\r\n        name: \"Virgin Islands\",\r\n        abbreviation: \"VI\"\r\n    },\r\n    {\r\n        name: \"Virginia\",\r\n        abbreviation: \"VA\"\r\n    },\r\n    {\r\n        name: \"Washington\",\r\n        abbreviation: \"WA\"\r\n    },\r\n    {\r\n        name: \"West Virginia\",\r\n        abbreviation: \"WV\"\r\n    },\r\n    {\r\n        name: \"Wisconsin\",\r\n        abbreviation: \"WI\"\r\n    },\r\n    {\r\n        name: \"Wyoming\",\r\n        abbreviation: \"WY\"\r\n    }\r\n]","import React, { useState } from 'react';\nimport styled from 'styled-components';\n\nimport DataTable from './DataTable';\n\nimport {\n  patternFileExtension,\n  patternLinesSeparator,\n  patternRowSeparator,\n  patternFullName,\n  patternPhone,\n  patternLicense,\n  patternLicenseStates,\n  patternFirstDateType,\n  patternSecondDateType,\n} from \"./regex\";\nimport {HEADERS, USA_STATES} from \"./utils\";\n\nconst Input = styled.input`\n  width: 0.1px;\n  height: 0.1px;\n  opacity: 0;\n  overflow: hidden;\n  position: absolute;\n  z-index: -1;\n`;\n\nconst Label = styled.label`\n  width: 180px;\n  height: 50px;\n  border-radius: 4px;\n  text-align: center;\n  cursor: pointer;\n  display: block;\n  font: 14px/50px Tahoma;\n  transition: all 0.18s ease-in-out;\n  border: 1px solid #333;\n  color: #333;\n  background: #eeee4a;\n  margin: 50px 0 20px;\n\n  &:hover {\n    color: white;\n    background: #333;\n  }\n`;\n\nfunction App() {\n  const [headers, setHeaders] = useState([]);\n  const [data, setData] = useState([]);\n  const [fileError, setFileError] = useState(false);\n\n\n  const headersValidation = headers => {\n    if (headers.length !== HEADERS.length) {\n      return false;\n    }\n\n    return headers\n        .every((header, index) => {\n          const preparedHeader = header.trim();\n          const patternHeader = new RegExp(preparedHeader, \"i\");\n\n          return patternHeader.test(HEADERS[index]);\n        })\n  };\n\n  const fullNameValidation = fullName => patternFullName.test(fullName);\n\n  const phoneValidation = phone => patternPhone.test(phone);\n\n  const ageValidation = age => age === '' ? true :\n      age.length === 2\n      && Number(age)\n      && Number(age) >= 21;\n\n  const experienceValidation = (experience, age = 21) => experience === '' ? true :\n      experience.length === 2\n      && Number(experience)\n      && Number(experience) >= 0\n      && Number(age ? age : 21) - Number(experience) >= 18;\n\n  const incomeValidation = income => income === '' ? true :\n      income.length <= 12\n      && Number(income)\n      && Number(income) >= 0\n      && Number(income) <= 1000000;\n\n  const hasChildrenValidation = hasChildren =>\n      ['TRUE', 'FALSE'].some( value => value === hasChildren);\n\n  const licenseStatesValidation = states => {\n    if (!patternLicenseStates.test(states)) {\n      return {\n        errorState: !(states === ''),\n        preparedStates: states,\n      }\n    }\n\n    let errorState = false;\n    const preparedStates = states\n        .split(', ')\n        .map( state => {\n          if (state.length === 2) {\n            const isValidState = USA_STATES\n                .some( existingState =>\n                    state.toUpperCase() === existingState.abbreviation );\n\n            errorState = !isValidState;\n            return isValidState ? state.toUpperCase() : state;\n          } else if (state.length > 2) {\n            const validStateObj = USA_STATES\n                .find( existingState => {\n                  return state === existingState.name\n                } );\n\n            errorState = !Boolean(validStateObj);\n            return errorState ? state : validStateObj.abbreviation;\n          } else {\n            errorState = state;\n            return state;\n          }\n        })\n        .join(', ');\n\n    return {\n      errorState,\n      preparedStates\n    }\n  }\n\n  const expirationDateValidation = date => {\n    if (date === '') return true;\n\n    if (!patternFirstDateType.test(date) && !patternSecondDateType.test(date))\n      return false;\n\n    const now = new Date();\n    const nowDay = now.getDate();\n    const nowMonth = now.getMonth();\n    const nowYear = now.getFullYear();\n\n    let parts, day, month, year;\n    if(patternFirstDateType.test(date)){\n      parts = date.split(\"/\");\n      day = parseInt(parts[1], 10);\n      month = parseInt(parts[0], 10);\n      year = parseInt(parts[2], 10);\n    }\n\n    if(patternSecondDateType.test(date)){\n      parts = date.split(\"-\");\n      day = parseInt(parts[2], 10);\n      month = parseInt(parts[1], 10);\n      year = parseInt(parts[0], 10);\n    }\n\n    const monthLength = [ 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 ];\n\n    if(year % 400 === 0 || (year % 100 !== 0 && year % 4 === 0))\n      monthLength[1] = 29;\n\n    return year >= nowYear\n        && year < 3000\n        && month >= 0\n        && month < 12\n        && day > 0\n        && day <= monthLength[month - 1]\n        && (year === nowYear ? month >= nowMonth : true)\n        && (year === nowYear && month === nowMonth ? date >= nowDay : true);\n  }\n\n  const licenseNumberValidation = license =>\n      license === '' ? true : patternLicense.test(license);\n\n\n  const processData = data => {\n    setFileError(false);\n\n    const lines = data.split(patternLinesSeparator);\n    let headers = lines[0].split(patternRowSeparator);\n\n    if (!headersValidation(headers)) {\n      setFileError(true);\n      return;\n    }\n\n    headers = [\n      \"ID\",\n      ...HEADERS,\n      \"Duplicate with\",\n    ];\n\n    const rows = [];\n    for (let i = 1; i < lines.length; i++) {\n      const row = [\n        String(i),\n        ...lines[i]\n            .split(patternRowSeparator)\n            .map(item => item.trim()),\n        '',\n      ];\n\n      const requiredFieldsAreFilled = row[1] && row[2] && row[3];\n      if (!requiredFieldsAreFilled){\n        setFileError(true);\n        return;\n      }\n\n      const rowsData = {};\n      for (let j = 0; j < headers.length; j++) {\n        let cellValue = row[j];\n\n        if (cellValue.length > 0) {\n          if (cellValue[0] === '\"') cellValue = cellValue.substring(1, cellValue.length - 1);\n          if (cellValue[cellValue.length - 1] === '\"') cellValue = cellValue.substring(cellValue.length - 2, 1);\n        }\n\n        let cellError = false;\n\n        switch (headers[j]) {\n          case 'Full Name':\n            cellError = !fullNameValidation(cellValue);\n            break;\n          case 'Phone':\n            cellError = !phoneValidation(cellValue);\n            cellValue = cellError ?\n                cellValue : `+1${cellValue.slice(-10)}`;\n            break;\n          case 'Email':\n            break;\n          case 'Age':\n            cellError = !ageValidation(cellValue);\n            cellValue = cellError || cellValue === '' ?\n                cellValue : Number(cellValue);\n            break;\n          case 'Experience':\n            cellError = !experienceValidation(cellValue, Number(row[j-1]));\n            cellValue = cellError || cellValue === '' ?\n                cellValue : Number(cellValue);\n            break;\n          case 'Yearly Income':\n            cellError = !incomeValidation(cellValue);\n            cellValue = cellError ?\n                cellValue : Number(cellValue).toFixed(2);\n            break;\n          case 'Has children':\n            cellValue = cellValue ? cellValue : 'FALSE';\n            cellError = !hasChildrenValidation(cellValue);\n            break;\n          case 'License states':\n            const { errorState, preparedStates } = licenseStatesValidation(cellValue)\n            cellError = errorState;\n            cellValue = preparedStates;\n            break;\n          case 'Expiration date':\n            cellError = !expirationDateValidation(cellValue);\n            break;\n          case 'License number':\n            cellError = !licenseNumberValidation(cellValue);\n            break;\n          default:\n            break;\n        }\n\n        const errorPrefix = cellError ? 'error' : '';\n        rowsData[errorPrefix + headers[j]] = cellValue;\n      }\n\n      // remove the blank rows\n      if (Object.values(rowsData).filter(x => x).length > 0) {\n        rows.push(rowsData);\n      }\n    }\n    console.log(rows)\n    setData(rows);\n    setHeaders(headers);\n  }\n\n  const handleFileUpload = e => {\n    if (!e.target.files[0]) return;\n\n    const file = e.target.files[0];\n\n    if (!patternFileExtension.test(file.name)){\n      setFileError(true);\n      return;\n    }\n\n    const reader = new FileReader();\n    reader.onload = (evt) => {\n      const result = evt.target.result;\n      processData(result);\n    };\n    reader.readAsBinaryString(file);\n  }\n\n  return (\n      <div>\n        <h3>Applicant - <a href=\"https://www.linkedin.com/in/khrystyna-yelyseyeva-378b2319a/\" target=\"_blank\" rel=\"noopener noreferrer\">Khrystyna Yelyseyeva (Linkedin)</a></h3>\n\n        <Label htmlFor=\"file\">\n          Виберіть файл\n          <Input\n              id=\"file\"\n              type=\"file\"\n              accept=\".csv\"\n              onChange={handleFileUpload}\n          />\n        </Label>\n\n        { fileError ?\n            <p>Error</p> :\n            <DataTable\n                headers={headers}\n                data={data}\n            />\n        }\n      </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}